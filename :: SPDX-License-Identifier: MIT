// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "./LargeDataAPI.sol";
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Strings.sol#L15-L35";
import "https://github.com/smartcontractkit/chainlink/blob/develop/contracts/src/v0.8/ChainlinkClient.sol";


contract Fixture is ChainlinkClient
{
    using Chainlink for Chainlink.Request;
    bytes public data;
    string public image_url;


    address public routerAddress;
    uint public leagueId;
    uint public eventId;
    uint public time;
    mapping (address => uint) public homeBets;
    mapping (address => uint) public awayBets;
    bool public isFinished = false;
    bool public isCancelled = true; // if a match is cancelled, then the betters can withdraw their funds
    uint public homeSum = 0+1; // 1 is initialized for zero division error
    uint public awaySum = 0+1;
    uint public winner; // 1 means home , 2 means draw, 3 means away
    string public homeScore;
    string public stringTemp ;

    constructor(uint _leagueId, uint _eventId, uint _time)
    {
        routerAddress = msg.sender;
        leagueId = _leagueId;
        eventId = _eventId;
        time = _time;

        setChainlinkToken(0xa36085F69e2889c224210F603D836748e7dC0088);
        setChainlinkOracle(0x74EcC8Bdeb76F2C6760eD2dc8A46ca5e581fA656);
    }

    function earlyWithdrawBet(bool _isHomeBet) public
    {
        // require(block.timestamp < time - 1 hours, "no bets can be withdrawn 3 hours before the fixture");
        uint toSend;

        if(_isHomeBet)
        {
            toSend = homeBets[msg.sender];
            homeBets[msg.sender] = 0;
        }
        else
        {
            toSend = awayBets[msg.sender]; 
            awayBets[msg.sender] = 0;  
        }
        toSend = toSend * 90 / 100; // 10% commision fees is taken for early withdrawals
        require(toSend > 0, "toSend must be > 0");

        payable(address(msg.sender)).transfer(toSend);
    }


    function requestBytes() public
    {
        // bytes32 specId = "b3b68ecd35464833a16613742640ae89";
        bytes32 specId = "7da2702f37fd48e5b1b9a5715e3509b6";
        uint256 payment = 100000000000000000;
        Chainlink.Request memory req = buildChainlinkRequest(specId, address(this), this.fulfillBytes.selector);
        string memory url = "https://www.thesportsdb.com/api/v1/json/50130162/lookupevent.php?id=";
        string memory _eventIdStr = Strings.toString(eventId);
        bytes memory temp;
        temp = abi.encodePacked(url);  
        temp = abi.encodePacked(temp, _eventIdStr);
        url = string(temp);
        req.add("get",url);
        req.add("path", "events,0,intHomeScore");
        sendOperatorRequest(req, payment);
    }

    function getWinnings() public{
        // require(block.timestamp > time + 1 hours, "winnnings can only be withdrawn 1 hour after the match");
        require(! isCancelled);
        require(isFinished);
        uint toSend;
        if(winner == 1){
            toSend = homeBets[msg.sender] *  (homeSum + awaySum) ;
            toSend = toSend / (awaySum);
            homeBets[msg.sender]=0;
        }
        else if(winner == 2)
        {
            toSend = homeBets[msg.sender] + awayBets[msg.sender];
            homeBets[msg.sender]=0;
            awayBets[msg.sender]=0;
        }
        else if(winner == 3)
        {
            toSend = awayBets[msg.sender] * (homeSum  + awaySum) ;
            toSend = toSend / (awaySum);
            awayBets[msg.sender]=0;
        }
        require(toSend > 0, "toSend comes out to be <= 0");
        payable(msg.sender).transfer( toSend );
    }

    function addBet(bool _isHomeBet) public payable
    {
        require(msg.value >= 0.01 ether);
        // require(block.timestamp < time - 5 minutes, "no bets can be added 10 minutes before the fixture");
        if(_isHomeBet)
        {
            homeBets[msg.sender] += msg.value;
            homeSum += msg.value;
        }
        else
        {
            awayBets[msg.sender] += msg.value;
            awaySum += msg.value;
        }
    }


    function cancelMatch() external
    {
        require(msg.sender == routerAddress);
        isCancelled = true;
    }

    /*
        Allows the user to withdraw all their bets (away and home) for the fixture if it is cancelled.
    */
    function withdrawIfCancelled() public
    {
        require(isCancelled);
        uint toSend = homeBets[msg.sender] + awayBets[msg.sender];
        require(toSend > 0);
        homeBets[msg.sender] = 0;
        awayBets[msg.sender] = 0;
        payable(msg.sender).transfer(toSend);
    }


        event RequestFulfilled(
            bytes32 indexed requestId,
            bytes indexed data
        );

        function fulfillBytes(bytes32 requestId,bytes memory bytesData) public recordChainlinkFulfillment(requestId)
        {
            emit RequestFulfilled(requestId, bytesData);
            data = bytesData;
            image_url = string(data);
        }
}



// 1,1154245,69696969